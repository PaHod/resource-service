server:
  port: ${RESOURCE_SERVICE_PORT}

spring:
  application:
    name: ${RESOURCE_SERVICE_NAME}
  datasource:
    #    url: jdbc:postgresql://host.docker.internal:5432/music_resource
    #    url: jdbc:postgresql://localhost:5432/music_resource
    url: jdbc:postgresql://${DB_SERVICE_HOST}:${DB_SERVICE_PORT}/${DB_NAME}
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}
    driver-class-name: org.postgresql.Driver

  liquibase:
    change-log: classpath:db/changelog/db.changelog-master.xml
  hibernate:
    ddl-auto: create
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  rabbitmq:
    ssl:
      enabled: true
    host: ${RABBITMQ_HOST}
    port: ${RABBITMQ_PORT}
    username: ${RABBITMQ_USERNAME}
    password: ${RABBITMQ_PASSWORD}

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_REGISTRY_URI:http://localhost:8761/eureka}

management.endpoints.web.exposure.include: '*'

rabbitmq:
  queue:
    name: music_queue
  exchange:
    name: music_exchange
  routing:
    key: music_routing_key

cloud:
  aws:
    bucket:
      name: "musicresourcestorebucket"
    credentials:
      access-key: ${AWS_ACCESS_KEY}
      secret-key: ${AWS_SECRET_KEY}
    region:
      static: "eu-north-1"
    stack:
      auto: false


client:
  services:
    storage:
      endpoint: http://${API_GATEWAY_NAME}/api/v1/storages


resilience4j:
  circuitbreaker:
    instances:
      getAllStorageTypes:
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 1000ms